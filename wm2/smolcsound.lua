-- SmolCsound implements a small ('smol') DSP unit by using Csound.
local luaCsnd6 = require('luaCsnd6')
local class = require('wm2.lib.middleclass')
local utils = require('wm2.utils')
local SmolP = require('wm2.smolp')
local SmolCsound = class('SmolCsound', SmolP)

function SmolCsound:initialize(server, replication_key, options)
    self._csound_orchestra = utils.pop(options, 'csound_code')
    SmolP.initialize(self, server, replication_key, options)
    self.perf_thread = luaCsnd6.CsoundPerformanceThread(server.csound)
end

-- Start smol csound instrument
function SmolCsound:start()
    SmolP.start(self)
    self:send_score()
    self.perf_thread:Play()
end

-- Stop smol csound instrument
function SmolCsound:stop()
    local active = self.active
    SmolP.stop(self)
    if active then
        self:send_score()
    end
end

function SmolCsound:shutdown()
    if self.perf_thread then self.perf_thread:Stop() end
end

-- Send current state to csound server.
function SmolCsound:send_score()
    local sco = self:score()
    self:debug("send: '" .. sco .. "'")
    self.perf_thread:InputMessage(sco)
end

-- One line of a csound score for the current state
function SmolCsound:score()
    if self.active then
        return 'i "' .. tostring(self.smolid) .. '" 0 -1'
    else
        return 'i "-' .. tostring(self.smolid) .. '" 0 0'
    end
end

-- The definition of the instrument as a csound orchestra.
function SmolCsound:orchestra()
    return (
        ';; Auto-generated by wm2.SmolCsound.csound_orchestra\n' ..
        'instr ' .. tostring(self.smolid) .. '\n' .. self._csound_orchestra .. "\nendin"
    )
end

return SmolCsound
